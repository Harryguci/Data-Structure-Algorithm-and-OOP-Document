#include <iostream>
using namespace std;

int _gcd(int a, int b) {
	if (b == 0) return a;
	else
		return _gcd(b, a % b);
}

class PS {
private:
	int _tu, _mau;

	void Handle() {
		int temp = _gcd(this->_tu, this->_mau);
		this->_tu /= temp;
		this->_mau /= temp;
	}
public:
	PS();
	PS(int a, int b);
	~PS();
	void set(int a, int b);
	void input();
	int getTu() {
		return this->_tu;
	}
	int getMau() {
		return this->_mau;
	}
	/*            Operator              */

	friend void operator+=(PS& A, const PS& B);
	friend PS operator+(const PS& A, const PS& B);

	friend void operator-=(PS& A, const PS& B);
	friend PS operator-(const PS& A, const PS& B);

	friend void operator*=(PS& A, const PS& B);
	friend PS operator*(const PS& A, const PS& B);

	friend void operator/=(PS& A, const PS& B);
	friend PS operator/(const PS& A, const PS& B);

	friend ostream& operator<<(ostream& os, PS& A);
	friend istream& operator>>(istream& is, PS& A);
};

PS::PS() {
	this->_tu = this->_mau = 0;
}
PS::PS(int a, int b) {
	this->_tu = a;
	this->_mau = b;
	Handle();
}
PS::~PS() { ; }
void PS::set(int a, int b) {
	this->_tu = a;
	this->_mau = b;
	Handle();
}
void PS::input() {
	cin >> this->_tu >> this->_mau;
	Handle();
}
void operator+=(PS& A, const PS& B) {
	A._mau *= B._mau;
	A._tu *= B._mau;

	int value = B._tu * A._mau;
	A._tu += value;
	A.Handle();
}
PS operator+(const PS& A, const PS& B) {
	PS res = A;
	res += B;
	return res;
}
void operator-=(PS& A, const PS& B) {
	A._mau *= B._mau;
	A._tu *= B._mau;

	int value = B._mau * A._mau;
	A._tu -= value;
	A.Handle();
}
PS operator-(const PS& A, const PS& B) {
	PS res = A;
	res -= B;
	res.Handle();
	return res;
}

void operator*=(PS& A, const PS& B) {
	A._mau *= B._mau;
	A._tu *= B._tu;
	A.Handle();
}

PS operator*(const PS& A, const PS& B) {
	PS res = A;
	res *= B;
	res.Handle();
	return res;
}
void operator/=(PS& A, const PS& B) {
	PS temp(B._mau, B._tu);
	A *= temp;
	A.Handle();
}

PS operator/(const PS& A, const PS& B) {
	PS res = A;
	res /= B;
	res.Handle();
	return res;
}

ostream& operator<<(ostream& os, PS& A) {
	if (A._mau == 0) {
		os << "NaN";
		return os;
	}
	os << A._tu << "/" << A._mau;
	return os;
}
istream& operator>>(istream& is, PS& A) {
	is >> A._tu >> A._mau;
	return is;
}

int main() {
	PS A;
	PS B;
	cin >> A >> B;
	A += B;
	cout << A;
	return 0;
}